/*
 * This software was developed at the National Institute of Standards and
 * Technology (NIST) by employees of the Federal Government in the course
 * of their official duties. Pursuant to title 17 Section 105 of the
 * United States Code, this software is not subject to copyright protection
 * and is in the public domain. NIST assumes no responsibility whatsoever for
 * its use by other parties, and makes no guarantees, expressed or implied,
 * about its quality, reliability, or any other characteristic.
 */

#ifndef __BE_IMAGE_PNG__
#define __BE_IMAGE_PNG__

#include <png.h>

#include <be_image_image.h>

namespace BiometricEvaluation
{
	namespace Image
	{
		/**
		 * @brief
		 * A PNG-encoded image.
		 */
		class PNG : public Image
		{
		public:
			PNG(
			    const uint8_t *data,
			    const uint64_t size)
			    throw (Error::DataError,
			    Error::StrategyError);

			~PNG();

			Utility::AutoArray<uint8_t>
			getRawData()
			    const
			    throw (Error::DataError);
	
			/**
			 * Whether or not data is a PNG image.
			 *
			 * @param[in] data
			 *	The buffer to check.
			 *
			 * @return
			 *	true if data appears to be a PNG image, false
			 *	otherwise
			 */
			static bool
			isPNG(
			    const uint8_t *data);

		protected:

		private:
			/**
			 * @brief
			 * Wrapper for reading PNG-encoded data from an
			 * AutoArray with libpng.
			 */
			typedef struct {
				/** PNG-encoded buffer */
				Utility::AutoArray<uint8_t> data;
				/** Number of bytes currently read by libpng */
				png_size_t offset;
			} png_buffer;
		
			/**
			 * @brief
			 * libpng callback to read data from an AutoArray.
			 *
			 * @param png_ptr
			 *	Pointer to a PNG struct for the image.
			 * @param buffer
			 *	Pointer to a png_buffer struct.
			 * @param length
			 *	Amount of data to copy from buffer->data
			 *	into buffer, starting from buffer->offset.
			 *
			 * @throw Error::StrategyError
			 *	Input buffer given to libpng is NULL or
			 *	libpng wants to read more data from input 
			 *	buffer than available.
			 */
			static void
			png_read_mem_src(
			    png_structp png_ptr,
			    png_bytep buffer,
			    png_size_t length)
		            throw (Error::StrategyError);
		            
		        /**
		         * @brief
		         * Convert libpng errors into C++ exceptions.
		         *
		         * @param png_ptr
		         *	Pointer to a PNG struct for the image.
		         * @param msg
		         *	C-style string containing an error message,
		         *	generated by libpng.
		         *
		         * @throw Error::StrategyError
		         *	Always thrown with msg.
		         */
		        static void
			png_error(
			    png_structp png_ptr,
			    png_const_charp msg)
			throw (Error::StrategyError);
		};
	}
}

#endif /* __BE_IMAGE_PNG__ */

